//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\GitHub-Perso\MetricTools\Evaluator.Grammar\Evaluator.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Evaluator.AutoGeneratedByGrammar {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="EvaluatorParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public interface IEvaluatorVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>ContantePi</c>
	/// labeled alternative in <see cref="EvaluatorParser.const"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitContantePi([NotNull] EvaluatorParser.ContantePiContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Variable</c>
	/// labeled alternative in <see cref="EvaluatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariable([NotNull] EvaluatorParser.VariableContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="EvaluatorParser.funcName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncName([NotNull] EvaluatorParser.FuncNameContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="EvaluatorParser.var"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVar([NotNull] EvaluatorParser.VarContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="EvaluatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumber([NotNull] EvaluatorParser.NumberContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Power</c>
	/// labeled alternative in <see cref="EvaluatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPower([NotNull] EvaluatorParser.PowerContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Function</c>
	/// labeled alternative in <see cref="EvaluatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction([NotNull] EvaluatorParser.FunctionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Boolean</c>
	/// labeled alternative in <see cref="EvaluatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBoolean([NotNull] EvaluatorParser.BooleanContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>PlusOrMinusExpr</c>
	/// labeled alternative in <see cref="EvaluatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPlusOrMinusExpr([NotNull] EvaluatorParser.PlusOrMinusExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Constant</c>
	/// labeled alternative in <see cref="EvaluatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant([NotNull] EvaluatorParser.ConstantContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="EvaluatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNot([NotNull] EvaluatorParser.NotContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ToAtomExpr</c>
	/// labeled alternative in <see cref="EvaluatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitToAtomExpr([NotNull] EvaluatorParser.ToAtomExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ChangeSign</c>
	/// labeled alternative in <see cref="EvaluatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitChangeSign([NotNull] EvaluatorParser.ChangeSignContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="EvaluatorParser.num"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNum([NotNull] EvaluatorParser.NumContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="EvaluatorParser.str"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStr([NotNull] EvaluatorParser.StrContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>OrExpr</c>
	/// labeled alternative in <see cref="EvaluatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrExpr([NotNull] EvaluatorParser.OrExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>AndExpr</c>
	/// labeled alternative in <see cref="EvaluatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAndExpr([NotNull] EvaluatorParser.AndExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>String</c>
	/// labeled alternative in <see cref="EvaluatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitString([NotNull] EvaluatorParser.StringContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>MultOrDivOrModExpr</c>
	/// labeled alternative in <see cref="EvaluatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultOrDivOrModExpr([NotNull] EvaluatorParser.MultOrDivOrModExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>Braces</c>
	/// labeled alternative in <see cref="EvaluatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBraces([NotNull] EvaluatorParser.BracesContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="EvaluatorParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBool([NotNull] EvaluatorParser.BoolContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>EqualityExpr</c>
	/// labeled alternative in <see cref="EvaluatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualityExpr([NotNull] EvaluatorParser.EqualityExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>RelationalExpr</c>
	/// labeled alternative in <see cref="EvaluatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationalExpr([NotNull] EvaluatorParser.RelationalExprContext context);
}
} // namespace Evaluator.AutoGeneratedByGrammar
