//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\GitHub-Perso\MetricTools\Evaluator.Grammar\Evaluator.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Evaluator.AutoGeneratedByGrammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class EvaluatorParser : Parser {
	public const int
		PI=1, PLUS=2, MINUS=3, MULT=4, DIV=5, POW=6, MOD=7, AND=8, OR=9, EQ=10, 
		NE=11, NOT=12, GT=13, GE=14, LT=15, LE=16, TRUE=17, FALSE=18, OBRACE=19, 
		CBRACE=20, ID=21, NUMBER=22, STRING=23, WS=24;
	public static readonly string[] tokenNames = {
		"<INVALID>", "PI", "PLUS", "'-'", "'*'", "'/'", "'^'", "'%'", "AND", "'||'", 
		"EQ", "NE", "NOT", "GT", "'>='", "'<'", "'<='", "TRUE", "FALSE", "OBRACE", 
		"')'", "ID", "NUMBER", "STRING", "WS"
	};
	public const int
		RULE_expr = 0, RULE_atom = 1, RULE_funcName = 2, RULE_var = 3, RULE_const = 4, 
		RULE_num = 5, RULE_str = 6, RULE_bool = 7;
	public static readonly string[] ruleNames = {
		"expr", "atom", "funcName", "var", "const", "num", "str", "bool"
	};

	public override string GrammarFileName { get { return "Evaluator.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


	    protected const int EOF = Eof;

	public EvaluatorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ToAtomExprContext : ExprContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ToAtomExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterToAtomExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitToAtomExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToAtomExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChangeSignContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(EvaluatorParser.MINUS, 0); }
		public ChangeSignContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterChangeSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitChangeSign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeSign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode OR() { return GetToken(EvaluatorParser.OR, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExprContext {
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode AND() { return GetToken(EvaluatorParser.AND, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerContext : ExprContext {
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode POW() { return GetToken(EvaluatorParser.POW, 0); }
		public PowerContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterPower(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitPower(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultOrDivOrModExprContext : ExprContext {
		public IToken op;
		public ITerminalNode DIV() { return GetToken(EvaluatorParser.DIV, 0); }
		public ITerminalNode MULT() { return GetToken(EvaluatorParser.MULT, 0); }
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(EvaluatorParser.MOD, 0); }
		public MultOrDivOrModExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterMultOrDivOrModExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitMultOrDivOrModExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOrDivOrModExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExprContext : ExprContext {
		public IToken op;
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode NE() { return GetToken(EvaluatorParser.NE, 0); }
		public ITerminalNode EQ() { return GetToken(EvaluatorParser.EQ, 0); }
		public EqualityExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterEqualityExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitEqualityExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusOrMinusExprContext : ExprContext {
		public IToken op;
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode MINUS() { return GetToken(EvaluatorParser.MINUS, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(EvaluatorParser.PLUS, 0); }
		public PlusOrMinusExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterPlusOrMinusExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitPlusOrMinusExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusOrMinusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExprContext : ExprContext {
		public IToken op;
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode LT() { return GetToken(EvaluatorParser.LT, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LE() { return GetToken(EvaluatorParser.LE, 0); }
		public ITerminalNode GT() { return GetToken(EvaluatorParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(EvaluatorParser.GE, 0); }
		public RelationalExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterRelationalExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitRelationalExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(EvaluatorParser.NOT, 0); }
		public NotContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			switch (_input.La(1)) {
			case MINUS:
				{
				_localctx = new ChangeSignContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 17; Match(MINUS);
				State = 18; expr(10);
				}
				break;
			case NOT:
				{
				_localctx = new NotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 19; Match(NOT);
				State = 20; expr(9);
				}
				break;
			case PI:
			case TRUE:
			case FALSE:
			case OBRACE:
			case ID:
			case NUMBER:
			case STRING:
				{
				_localctx = new ToAtomExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 21; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 47;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 45;
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						_localctx = new PowerContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 24;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 25; Match(POW);
						State = 26; expr(9);
						}
						break;

					case 2:
						{
						_localctx = new MultOrDivOrModExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 27;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 28;
						((MultOrDivOrModExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULT) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((MultOrDivOrModExprContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 29; expr(8);
						}
						break;

					case 3:
						{
						_localctx = new PlusOrMinusExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 30;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 31;
						((PlusOrMinusExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((PlusOrMinusExprContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 32; expr(7);
						}
						break;

					case 4:
						{
						_localctx = new RelationalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 33;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 34;
						((RelationalExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << LT) | (1L << LE))) != 0)) ) {
							((RelationalExprContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 35; expr(6);
						}
						break;

					case 5:
						{
						_localctx = new EqualityExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 36;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 37;
						((EqualityExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==EQ || _la==NE) ) {
							((EqualityExprContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 38; expr(5);
						}
						break;

					case 6:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 39;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 40; Match(AND);
						State = 41; expr(4);
						}
						break;

					case 7:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 42;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 43; Match(OR);
						State = 44; expr(3);
						}
						break;
					}
					} 
				}
				State = 49;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariableContext : AtomContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VariableContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : AtomContext {
		public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public StringContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : AtomContext {
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public NumberContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionContext : AtomContext {
		public ITerminalNode CBRACE() { return GetToken(EvaluatorParser.CBRACE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode OBRACE() { return GetToken(EvaluatorParser.OBRACE, 0); }
		public FuncNameContext funcName() {
			return GetRuleContext<FuncNameContext>(0);
		}
		public FunctionContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracesContext : AtomContext {
		public ITerminalNode CBRACE() { return GetToken(EvaluatorParser.CBRACE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode OBRACE() { return GetToken(EvaluatorParser.OBRACE, 0); }
		public BracesContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterBraces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitBraces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraces(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : AtomContext {
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public BooleanContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantContext : AtomContext {
		public ConstContext @const() {
			return GetRuleContext<ConstContext>(0);
		}
		public ConstantContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_atom);
		try {
			State = 64;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				_localctx = new FunctionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; funcName();
				State = 51; Match(OBRACE);
				State = 52; expr(0);
				State = 53; Match(CBRACE);
				}
				break;

			case 2:
				_localctx = new BracesContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 55; Match(OBRACE);
				State = 56; expr(0);
				State = 57; Match(CBRACE);
				}
				break;

			case 3:
				_localctx = new NumberContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 59; num();
				}
				break;

			case 4:
				_localctx = new BooleanContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 60; @bool();
				}
				break;

			case 5:
				_localctx = new ConstantContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 61; @const();
				}
				break;

			case 6:
				_localctx = new VariableContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 62; var();
				}
				break;

			case 7:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 63; str();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncNameContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public FuncNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterFuncName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitFuncName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncNameContext funcName() {
		FuncNameContext _localctx = new FuncNameContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_funcName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(EvaluatorParser.ID, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstContext : ParserRuleContext {
		public ConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const; } }
	 
		public ConstContext() { }
		public virtual void CopyFrom(ConstContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ContantePiContext : ConstContext {
		public ITerminalNode PI() { return GetToken(EvaluatorParser.PI, 0); }
		public ContantePiContext(ConstContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterContantePi(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitContantePi(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContantePi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstContext @const() {
		ConstContext _localctx = new ConstContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_const);
		try {
			_localctx = new ContantePiContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(PI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(EvaluatorParser.NUMBER, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_num);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(EvaluatorParser.STRING, 0); }
		public StrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_str; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitStr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrContext str() {
		StrContext _localctx = new StrContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_str);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(EvaluatorParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(EvaluatorParser.FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEvaluatorListener typedListener = listener as IEvaluatorListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEvaluatorVisitor<TResult> typedVisitor = visitor as IEvaluatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			_la = _input.La(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 8);

		case 1: return Precpred(_ctx, 7);

		case 2: return Precpred(_ctx, 6);

		case 3: return Precpred(_ctx, 5);

		case 4: return Precpred(_ctx, 4);

		case 5: return Precpred(_ctx, 3);

		case 6: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1AQ\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x19\n\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x30\n\x2\f\x2\xE\x2\x33\v"+
		"\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x5\x3\x43\n\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6"+
		"\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\t\x2\x2\x3\x2\n\x2\x2\x4\x2\x6\x2\b"+
		"\x2\n\x2\f\x2\xE\x2\x10\x2\x2\a\x4\x2\x6\a\t\t\x3\x2\x4\x5\x3\x2\xF\x12"+
		"\x3\x2\f\r\x3\x2\x13\x14W\x2\x18\x3\x2\x2\x2\x4\x42\x3\x2\x2\x2\x6\x44"+
		"\x3\x2\x2\x2\b\x46\x3\x2\x2\x2\nH\x3\x2\x2\x2\fJ\x3\x2\x2\x2\xEL\x3\x2"+
		"\x2\x2\x10N\x3\x2\x2\x2\x12\x13\b\x2\x1\x2\x13\x14\a\x5\x2\x2\x14\x19"+
		"\x5\x2\x2\f\x15\x16\a\xE\x2\x2\x16\x19\x5\x2\x2\v\x17\x19\x5\x4\x3\x2"+
		"\x18\x12\x3\x2\x2\x2\x18\x15\x3\x2\x2\x2\x18\x17\x3\x2\x2\x2\x19\x31\x3"+
		"\x2\x2\x2\x1A\x1B\f\n\x2\x2\x1B\x1C\a\b\x2\x2\x1C\x30\x5\x2\x2\v\x1D\x1E"+
		"\f\t\x2\x2\x1E\x1F\t\x2\x2\x2\x1F\x30\x5\x2\x2\n !\f\b\x2\x2!\"\t\x3\x2"+
		"\x2\"\x30\x5\x2\x2\t#$\f\a\x2\x2$%\t\x4\x2\x2%\x30\x5\x2\x2\b&\'\f\x6"+
		"\x2\x2\'(\t\x5\x2\x2(\x30\x5\x2\x2\a)*\f\x5\x2\x2*+\a\n\x2\x2+\x30\x5"+
		"\x2\x2\x6,-\f\x4\x2\x2-.\a\v\x2\x2.\x30\x5\x2\x2\x5/\x1A\x3\x2\x2\x2/"+
		"\x1D\x3\x2\x2\x2/ \x3\x2\x2\x2/#\x3\x2\x2\x2/&\x3\x2\x2\x2/)\x3\x2\x2"+
		"\x2/,\x3\x2\x2\x2\x30\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2"+
		"\x2\x32\x3\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x34\x35\x5\x6\x4\x2\x35\x36"+
		"\a\x15\x2\x2\x36\x37\x5\x2\x2\x2\x37\x38\a\x16\x2\x2\x38\x43\x3\x2\x2"+
		"\x2\x39:\a\x15\x2\x2:;\x5\x2\x2\x2;<\a\x16\x2\x2<\x43\x3\x2\x2\x2=\x43"+
		"\x5\f\a\x2>\x43\x5\x10\t\x2?\x43\x5\n\x6\x2@\x43\x5\b\x5\x2\x41\x43\x5"+
		"\xE\b\x2\x42\x34\x3\x2\x2\x2\x42\x39\x3\x2\x2\x2\x42=\x3\x2\x2\x2\x42"+
		">\x3\x2\x2\x2\x42?\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42\x41\x3\x2\x2\x2\x43"+
		"\x5\x3\x2\x2\x2\x44\x45\x5\b\x5\x2\x45\a\x3\x2\x2\x2\x46G\a\x17\x2\x2"+
		"G\t\x3\x2\x2\x2HI\a\x3\x2\x2I\v\x3\x2\x2\x2JK\a\x18\x2\x2K\r\x3\x2\x2"+
		"\x2LM\a\x19\x2\x2M\xF\x3\x2\x2\x2NO\t\x6\x2\x2O\x11\x3\x2\x2\x2\x6\x18"+
		"/\x31\x42";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Evaluator.AutoGeneratedByGrammar
